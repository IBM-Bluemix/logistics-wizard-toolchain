---
stages:
- name: TEST
  inputs:
  - type: git
    branch: dev
    service: ${CONTROLLER_REPO}
  triggers:
  - type: commit
  properties:
  - name: LOGISTICS_WIZARD_ENV
    value: TEST
    type: text
  - name: COVERALLS_REPO_TOKEN
    value: ${COVERALLS_REPO_TOKEN}
    type: secure
  - name: SMTP_SERVER
    value: smtp.gmail.com
    type: text
  - name: SMTP_SERVER_PORT
    value: 587
    type: text
  - name: ERP_SERVICE
    value: ${DEV_ERP_SERVICE}
    type: text
  - name: TEST_SMTP_USER_NAME
    value: ${TEST_SMTP_USER_NAME}
    type: secure
  - name: TEST_SMTP_PASSWORD
    value: ${TEST_SMTP_PASSWORD}
    type: secure
  jobs:
  - name: Unit Test
    type: tester
    script: |
      #!/bin/bash
      # Export email env vars
      export SMTP_USER_NAME=${TEST_SMTP_USER_NAME}
      export SMTP_PASSWORD=${TEST_SMTP_PASSWORD}
      # Download Python dependencies
      sudo pip install virtualenv
      virtualenv venv
      source venv/bin/activate
      export PYTHONPATH=$PWD
      pip install -r requirements.dev.txt
      # Run unit and coverage tests
      coverage run server/tests/run_unit_tests.py
      coverage run --append server/tests/run_integration_tests.py
      if [ -z ${COVERALLS_REPO_TOKEN} ]; then
        echo No Coveralls token specified, skipping coveralls.io upload
      else
        COVERALLS_REPO_TOKEN=$COVERALLS_REPO_TOKEN coveralls
      fi
- name: BUILD
  inputs:
  - type: git
    branch: dev
    service: ${CONTROLLER_REPO}
  triggers:
  - type: stage
  jobs:
  - name: Build
    type: builder
- name: DEPLOY
  inputs:
  - type: job
    stage: BUILD
    job: Build
  triggers:
  - type: stage
  properties:
  - name: CF_APP_NAME
    value: ${DEV_CF_APP_NAME}
    type: text
  - name: LOGISTICS_WIZARD_ENV
    value: DEV
    type: text
  - name: DEV_ERP_SERVICE
    value: ${DEV_ERP_SERVICE}
    type: text
  - name: SMTP_SERVER
    value: smtp.gmail.com
    type: text
  - name: SMTP_SERVER_PORT
    value: 587
    type: text
  - name: DEV_SMTP_USER_NAME
    value: ${DEV_SMTP_USER_NAME}
    type: secure
  - name: DEV_SMTP_PASSWORD
    value: ${DEV_SMTP_PASSWORD}
    type: secure
  jobs:
  - name: Deploy to dev
    type: deployer
    target:
      region_id: ${REGION_ID}
      organization: ${ORG_NAME}
      space: ${SPACE_NAME}
      application: ${DEV_CF_APP_NAME}
    script: |-
      #!/bin/bash
      # Create CF services
      cf create-service service_discovery free lw-service-discovery
      cf push "${CF_APP_NAME}"  -n $CF_APP --no-start
      # Set app's env vars
      cf set-env ${CF_APP_NAME} LOGISTICS_WIZARD_ENV ${LOGISTICS_WIZARD_ENV}
      cf set-env ${CF_APP_NAME} ERP_SERVICE ${DEV_ERP_SERVICE}
      cf set-env ${CF_APP_NAME} SMTP_SERVER ${SMTP_SERVER}
      cf set-env ${CF_APP_NAME} SMTP_SERVER_PORT ${SMTP_SERVER_PORT}
      if [ ! -z ${DEV_SMTP_USER_NAME} ]; then
        cf set-env ${CF_APP_NAME} SMTP_USER_NAME ${DEV_SMTP_USER_NAME}
        cf set-env ${CF_APP_NAME} SMTP_PASSWORD ${DEV_SMTP_PASSWORD}
      fi
      cf set-env ${CF_APP_NAME} SD_STATUS OFF
      cf start ${CF_APP}
